@import "tailwindcss";

/* CSS Variables for theming */
:root {
  --color-bg: #ffffff;
  --color-bg-secondary: #f9fafb;
  --color-bg-hover: #f3f4f6;
  --color-text: #111827;
  --color-text-secondary: #6b7280;
  --color-border: #e5e7eb;
  --font-family:
    "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;

  /* Semantic variables used by components */
  --bg: var(--color-bg);
  --surface: var(--color-bg-secondary);
  --bg-hover: var(--color-bg-hover);
  --text: var(--color-text);
  --muted: var(--color-text-secondary);
  --border: var(--color-border);

  /* Brand / accent colors */
  --brand: #6366f1;
  /* indigo-500 */
  --accent: #ec4899;
  /* rose-500 */
  --header-gradient-end: #AD63C7;

  --theme: var(--text);
}

.dark {
  --color-bg: #111827;
  --color-bg-secondary: #1f2937;
  --color-bg-hover: #374151;
  --color-text: #f9fafb;
  --color-text-secondary: #d1d5db;
  --color-border: #374151;

  /* Semantic variables for dark mode */
  --bg: var(--color-bg);
  --surface: var(--color-bg-secondary);
  --bg-hover: var(--color-bg-hover);
  --text: var(--color-text);
  --muted: var(--color-text-secondary);
  --border: var(--color-border);

  /* Brand / accent colors (adjusted for dark) */
  --brand: #8b5cf6;
  /* slightly brighter indigo */
  --accent: #f472b6;

  --header-gradient-end: #BD6CD5;

  --theme: var(--text);
}

/* Apply defaults */
html,
body {
  background-color: var(--bg, var(--color-bg));
  color: var(--text, var(--color-text));
  font-family: var(--font-family);
}

/* ReactFlow theming using Tailwind CSS custom properties */
.react-flow {
  background: var(--bg);
}

/* Light theme (default) */

.react-flow__edge-path {
  stroke: var(--muted) !important;
}

.react-flow__controls {
  background: var(--surface) !important;
  border-color: var(--border) !important;
}

.react-flow__controls button {
  background: var(--surface) !important;
  border-color: var(--border) !important;
  color: var(--text) !important;
}

.react-flow__controls button:hover {
  background: var(--bg) !important;
}

.react-flow__minimap {
  background: var(--surface) !important;
  border-color: var(--border) !important;
}

.react-flow__background {
  background: var(--bg) !important;
}

/* Dark theme overrides */

.dark .react-flow__edge-path {
  stroke: var(--muted) !important;
}

.dark .react-flow__controls {
  background: var(--surface) !important;
  border-color: var(--border) !important;
}

.dark .react-flow__controls button {
  background: var(--surface) !important;
  border-color: var(--border) !important;
  color: var(--text) !important;
}

.dark .react-flow__controls button:hover {
  background: var(--bg) !important;
}

.dark .react-flow__minimap {
  background: var(--surface) !important;
  border-color: var(--border) !important;
}

.dark .react-flow__background {
  background: var(--bg) !important;
}

/* Semantic utility classes that reference theme variables */
.text-theme {
  color: var(--text, var(--color-text));
}

.text-muted {
  color: var(--muted, var(--color-text-secondary));
}

.bg-theme {
  background-color: var(--bg, var(--color-bg));
}

.bg-surface {
  background-color: var(--surface, var(--color-bg-secondary));
}

.border-theme {
  border-color: var(--border, var(--color-border));
}

.text-brand {
  color: var(--brand, #6366f1);
}

.bg-accent {
  background-color: var(--accent, #ec4899);
}

/* End of theme utilities */

/* Utility classes */
.line-clamp-2 {
  display: -webkit-box;
  -webkit-line-clamp: 2;
  line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.line-clamp-3 {
  display: -webkit-box;
  -webkit-line-clamp: 3;
  line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

/* Themed scrollbar for component palette */
.component-palette {
  scrollbar-width: thin;
  scrollbar-color: rgba(0, 0, 0, 0.2) transparent;
}

.component-palette::-webkit-scrollbar {
  width: 10px;
}

.component-palette::-webkit-scrollbar-track {
  background: transparent;
}

.component-palette::-webkit-scrollbar-thumb {
  background-color: rgba(0, 0, 0, 0.2);
  border-radius: 9999px;
  border: 2px solid transparent;
  background-clip: padding-box;
}

/* Dark theme override */
.dark .component-palette {
  scrollbar-color: rgba(255, 255, 255, 0.12) transparent;
}

.dark .component-palette::-webkit-scrollbar-thumb {
  background-color: rgba(255, 255, 255, 0.12);
}

/* Ensure selects and their options follow the theme variables (light + dark). */
select,
select option {
  background-color: var(--surface) !important;
  color: var(--text) !important;
  border-color: var(--border) !important;
}

/* Scope additional rules to component-palette and inspector areas to minimize global impact */
.component-palette select,
.inspector-panel select,
.component-palette select option,
.inspector-panel select option {
  background-color: var(--surface) !important;
  color: var(--text) !important;
}

/* Option hover/selected styling to use brand color for visibility */
.component-palette select option:hover,
.component-palette select option:checked,
.component-palette select option:focus,
.inspector-panel select option:hover,
.inspector-panel select option:checked,
.inspector-panel select option:focus {
  background-color: var(--brand) !important;
  color: var(--surface) !important;
}

/* Slightly different brand tone in dark mode for contrast */
.dark .component-palette select option:hover,
.dark .component-palette select option:checked,
.dark .component-palette select option:focus,
.dark .inspector-panel select option:hover,
.dark .inspector-panel select option:checked,
.dark .inspector-panel select option:focus {
  background-color: color-mix(
    in srgb,
    var(--brand) 80%,
    rgba(255, 255, 255, 0.06)
  ) !important;
  color: var(--surface) !important;
}

/* TipTap Editor Styles */
.ProseMirror {
  outline: none !important;
  padding: 0.5rem;
  color: var(--text);
  background-color: transparent;
  line-height: 1.6;
  font-size: 0.875rem;
}

.ProseMirror p {
  margin: 0.5rem 0;
}

.ProseMirror p:first-child {
  margin-top: 0;
}

.ProseMirror p:last-child {
  margin-bottom: 0;
}

.ProseMirror h1,
.ProseMirror h2,
.ProseMirror h3,
.ProseMirror h4,
.ProseMirror h5,
.ProseMirror h6 {
  color: var(--text);
  font-weight: 600;
  margin: 1rem 0 0.5rem 0;
}

.ProseMirror h1 {
  font-size: 1.5rem;
}
.ProseMirror h2 {
  font-size: 1.25rem;
}
.ProseMirror h3 {
  font-size: 1.125rem;
}

.ProseMirror ul,
.ProseMirror ol {
  margin: 0.5rem 0;
  padding-left: 1.5rem;
}

.ProseMirror ul {
  list-style-type: disc;
}

.ProseMirror ol {
  list-style-type: decimal;
}

.ProseMirror li {
  margin: 0.25rem 0;
  display: list-item;
}

.ProseMirror li p {
  margin: 0;
}

/* Nested list styles */
.ProseMirror ul ul,
.ProseMirror ol ul {
  list-style-type: circle;
}

.ProseMirror ol ol,
.ProseMirror ul ol {
  list-style-type: lower-alpha;
}

.ProseMirror blockquote {
  border-left: 4px solid var(--brand);
  padding-left: 1rem;
  margin: 1rem 0;
  font-style: italic;
  background-color: rgba(99, 102, 241, 0.05);
}

.ProseMirror code {
  background-color: var(--bg-hover);
  padding: 0.125rem 0.25rem;
  border-radius: 0.25rem;
  font-family: "Courier New", monospace;
  font-size: 0.875em;
}

.ProseMirror pre {
  background-color: var(--surface);
  border: 1px solid var(--border);
  padding: 1rem;
  border-radius: 0.5rem;
  overflow-x: auto;
  margin: 1rem 0;
}

.ProseMirror pre code {
  background: none;
  padding: 0;
  border-radius: 0;
}

.ProseMirror strong {
  font-weight: 600;
}

.ProseMirror em {
  font-style: italic;
}

.ProseMirror s {
  text-decoration: line-through;
}

/* Placeholder styles */
.ProseMirror p.is-editor-empty:first-child::before {
  content: attr(data-placeholder);
  float: left;
  color: var(--muted);
  pointer-events: none;
  height: 0;
}

/* Dark mode adjustments */
.dark .ProseMirror blockquote {
  background-color: rgba(139, 92, 246, 0.1);
}

.dark .ProseMirror code {
  background-color: var(--bg-hover);
}

.dark .ProseMirror pre {
  background-color: var(--surface);
}

/* Grid pattern overlay for canvas-like background */
.grid-pattern-overlay::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
  background-image: 
    linear-gradient(var(--theme, var(--text)) 1px, transparent 1px),
    linear-gradient(90deg, var(--theme, var(--text)) 1px, transparent 1px);
  background-size: 60px 60px, 60px 60px;
  opacity: 0.05;
  z-index: 0;
}

/* Hero section grid overlay */
.hero-grid-overlay {
  background-image: 
    linear-gradient(white 1px, transparent 1px),
    linear-gradient(90deg, white 1px, transparent 1px);
  background-size: 60px 60px;
}

/* Animation delay utility classes */
.delay-200 { animation-delay: 0.2s; }
.delay-300 { animation-delay: 0.3s; }
.delay-400 { animation-delay: 0.4s; }
.delay-500 { animation-delay: 0.5s; }
.delay-600 { animation-delay: 0.6s; }
.delay-700 { animation-delay: 0.7s; }
.delay-800 { animation-delay: 0.8s; }
.delay-900 { animation-delay: 0.9s; }
.delay-1000 { animation-delay: 1s; }
.delay-1100 { animation-delay: 1.1s; }
.delay-1200 { animation-delay: 1.2s; }
.delay-1500 { animation-delay: 1.5s; }

/* Min height utility */
.min-h-full { min-height: 100%; }

/* Fade in animations with delays */
.fade-in-up {
  opacity: 1;
  transform: translateY(0);
}

.fade-in-up-delay-100 {
  transition-delay: 100ms;
}

.fade-in-up-delay-200 {
  transition-delay: 200ms;
}

.fade-in-up-delay-300 {
  transition-delay: 300ms;
}

/* Gradient icon backgrounds */
.gradient-icon-blue-cyan {
  background: linear-gradient(135deg, #3b82f6 0%, #06b6d4 100%);
}

.gradient-icon-purple-pink {
  background: linear-gradient(135deg, #8b5cf6 0%, #ec4899 100%);
}

.gradient-icon-orange-red {
  background: linear-gradient(135deg, #f97316 0%, #ef4444 100%);
}

/* CTA gradient background */
.cta-gradient-bg {
  background: linear-gradient(135deg, var(--brand) 0%, var(--accent) 100%);
}

/* Elevated card background */
.elevated-card-bg {
  background: color-mix(in srgb, var(--surface) 95%, white 5%);
}
